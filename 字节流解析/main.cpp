#include <iostream>
#include <vector>
#include <thread>
#include <iostream>

#pragma warning(disable:4996)
#include <map>
#include <functional>
#include <thread>
#include <condition_variable>
#include "parser.h"
typedef int(*Tf)(int a, double b);
// 要解析的数据，测试用
uint8_t data[] = {
    //0xAA, 0xBB, 0x01, 0x03, 0x04, 0x05, 0x06, 0x07, 0xAA, 0xBB, 0x0A, 0x0B,
    0x0D, 0x0E, 0x0F, 0x75, 0xAA, 0xBB, 0x04, 0x80, 0x02, 0x00, 0x9B, 0xE2,
    0xAA, 0xAA, 0x04, 0x80, 0x02, 0x00, 0xF6, 0x87, 0xAA, 0xAA, 0x04, 0x80,
    0x02, 0x00, 0xEC, 0x91, 0xAA, 0xAA, 0x04, 0x80, 0x02, 0x01, 0x15, 0x67,
    0xAA, 0xAA, 0x04, 0x80, 0x02, 0x01, 0x49, 0x33, 0xAA, 0xAA, 0x04, 0x80,
    0x02, 0x00, 0xE7, 0x96, 0xAA, 0xAA, 0x04, 0x80, 0x02, 0x00, 0x68, 0x15,
    0xAA, 0xBB, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0xAA, 0xBC, 0x04, 0x80,
    0x02, 0x00, 0x66, 0x17, 0xAA, 0xAA, 0x04, 0x80, 0x02, 0x00, 0xA5, 0xD8,
    0xAA, 0xAA, 0x04, 0x80, 0x02, 0x01, 0x26, 0x56, 0xAA, 0xAA, 0x04, 0x80,
    0x02, 0x01, 0x73, 0x09, 0xAA, 0xAA, 0x04, 0x80, 0x02, 0x01, 0x64, 0x18,
    0xAA, 0xBB, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0xAA, 0xBB, 0x04, 0x80,
    0x02, 0x01, 0xC6, 0xB6, 0xAA, 0xAA, 0x04, 0x80, 0x02, 0x01, 0x7B, 0x01,
    0xAA, 0xAA, 0x04, 0x80, 0x02, 0x00, 0xCB, 0xB2, 0xAA, 0xAA, 0x04, 0x80,
    0x02, 0x00, 0x2C, 0x51, 0xAA, 0xAA, 0x04, 0x80, 0x02, 0xFF, 0xE5, 0x99
}; 
DataParser *parser;
void put() {
    while (true) {
        parser->PutData(data, sizeof(data));
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
}
void pop() {
    bool ret;
    uint8_t result[100];
    int length;
    int cnt = 0;
    while (true) {
        ret = parser->PopFrame(result, length);
        if (ret) {
            for (int i = 0; i < length; i++)
                printf("%02X ", result[i]);
            printf("\n %d \n", cnt++);
        }
    }
}
int main() {
    parser = DataParser::GetInstance("ConcreteParser");
    std::thread thread1(put);
    std::thread thread2(pop);
    thread1.join();
    thread2.join();
    return 0;
}